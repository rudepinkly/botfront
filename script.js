// static/script.js

const webapp = window.Telegram?.WebApp;
if (webapp) {
  webapp.expand();
}
const params = new URLSearchParams(window.location.search);
const chat_id = params.get("chat_id");
let initData = webapp?.initData || "";

function log(...args) {
  console.log("[app]", ...args);
}

async function postJSON(url, body) {
  const res = await fetch(url, {
    method: "POST",
    headers: {"Content-Type":"application/json"},
    body: JSON.stringify(body)
  });
  return res.json();
}

function formatProfile(user, crew) {
  return `
    <div class="stat"><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> ${user.rating}</div>
    <div class="stat"><strong>–¢–∏—Ç—É–ª:</strong> ${user.title}</div>
    <div class="stat"><strong>–°—Ç—Ä–∏–∫:</strong> ${user.streak} –¥–Ω–µ–π</div>
    <div class="stat"><strong>–ü—Ä–µ—Å—Ç–∏–∂:</strong> x${user.prestige_multiplier.toFixed(2)}</div>
    <div class="stat"><strong>–ö–ª–∞–Ω:</strong> ${crew || "‚Äî"}</div>
  `;
}

async function loadProfile() {
  const res = await postJSON("/api/profile", { init_data: initData, chat_id });
  if (!res.ok) {
    document.getElementById("profile-body").innerText = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è";
    return;
  }
  const user = res.user;
  document.getElementById("username").innerText = user.username || "Anon";
  document.getElementById("profile-body").innerHTML = formatProfile(user, res.crew);
  // –¢–æ–ø
  const list = document.getElementById("top-list");
  list.innerHTML = "";
  res.top.forEach((t, i) => {
    const el = document.createElement("div");
    el.className = "top-row";
    el.innerHTML = `${i+1}. <strong>${t.username}</strong> ‚Äî ${t.rating}`;
    list.appendChild(el);
  });
}

async function doDaily() {
  const btn = document.getElementById("daily-btn");
  btn.disabled = true;
  const res = await postJSON("/api/daily", { init_data: initData, chat_id });
  if (!res.ok) {
    alert("–û—à–∏–±–∫–∞: " + (res.error || "unknown"));
  } else {
    animateRatingUpdate(res.user);
    showToast(`Œî ${res.daily.delta} —Ä–µ–π—Ç–∏–Ω–≥–∞!`);
    document.getElementById("profile-body").innerHTML = formatProfile(res.user, null);
  }
  btn.disabled = false;
}

function animateRatingUpdate(user) {
  const card = document.getElementById("profile");
  card.classList.add("pulse");
  setTimeout(() => card.classList.remove("pulse"), 500);
}

function showToast(text) {
  let existing = document.getElementById("toast");
  if (existing) existing.remove();
  const t = document.createElement("div");
  t.id = "toast";
  t.style = "position:fixed;bottom:20px;right:20px;padding:12px 18px;background:rgba(255,255,255,.1);border:1px solid #9b79ff;border-radius:8px;font-weight:600;";
  t.innerText = text;
  document.body.appendChild(t);
  setTimeout(() => t.remove(), 2500);
}

// –ö–æ–ª–µ—Å–æ

let spinning = false;
async function spinWheel() {
  if (spinning) return;
  spinning = true;
  const wheel = document.getElementById("wheel-wheel");
  // —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç 3 –¥–æ 5 –æ–±–æ—Ä–æ—Ç–æ–≤ + —Ä–∞–Ω–¥–æ–º)
  const extra = Math.floor(Math.random() * 360);
  const rotations = 4 * 360 + extra;
  wheel.style.transition = "transform 4s cubic-bezier(.17,.67,.83,.67)";
  wheel.style.transform = `rotate(${rotations}deg)`;
  // –∑–∞–ø—Ä–æ—Å –∫ API –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const res = await postJSON("/api/wheel", { init_data: initData, chat_id });

  // –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  setTimeout(() => {
    let desc = res.wheel?.description || "‚Äî";
    document.getElementById("wheel-result").innerText = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${desc}`;
    if (res.user) {
      document.getElementById("profile-body").innerHTML = formatProfile(res.user, null);
    }
    showToast(`–ö–æ–ª–µ—Å–æ: ${desc}`);
    // —Å–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ
    wheel.style.transition = "none";
    const actualDeg = rotations % 360;
    wheel.style.transform = `rotate(${actualDeg}deg)`;
    setTimeout(() => {
      wheel.style.transition = "";
      spinning = false;
    }, 50);
  }, 4200);
}

// –°–ª–æ—Ç

async function spinSlot() {
  const r1 = document.getElementById("r1");
  const r2 = document.getElementById("r2");
  const r3 = document.getElementById("r3");
  const resultEl = document.getElementById("slot-result");

  // –∫–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –±–µ–≥—É—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const symbols = ["üçí", "üçã", "üîî", "‚≠ê", "7Ô∏è‚É£"];
  let count = 0;
  const interval = setInterval(() => {
    r1.innerText = symbols[Math.floor(Math.random() * symbols.length)];
    r2.innerText = symbols[Math.floor(Math.random() * symbols.length)];
    r3.innerText = symbols[Math.floor(Math.random() * symbols.length)];
    count++;
    if (count > 10) clearInterval(interval);
  }, 80);

  const res = await postJSON("/api/slot", { init_data: initData, chat_id });
  setTimeout(() => {
    if (res.slot) {
      r1.innerText = res.slot.result[0];
      r2.innerText = res.slot.result[1];
      r3.innerText = res.slot.result[2];
      if (res.slot.payout > 0) {
        resultEl.innerText = `–í—ã–∏–≥—Ä—ã—à: ${res.slot.payout}!`;
        showToast(`+${res.slot.payout} —Ä–µ–π—Ç–∏–Ω–≥–∞`);
      } else {
        resultEl.innerText = `–ù–∏—á–µ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.`;
      }
      if (res.user) {
        document.getElementById("profile-body").innerHTML = formatProfile(res.user, null);
      }
    }
  }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
document.getElementById("daily-btn").addEventListener("click", doDaily);
document.getElementById("spin-wheel-btn").addEventListener("click", spinWheel);
document.getElementById("spin-slot-btn").addEventListener("click", spinSlot);

loadProfile();
