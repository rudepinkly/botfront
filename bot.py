# bot.py
import os
import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import MenuButtonWebApp, WebAppInfo

# —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å parse_mode (–µ—Å–ª–∏ –µ—Å—Ç—å)
try:
    from aiogram.types import DefaultBotProperties
    from aiogram.enums.parse_mode import ParseMode

    def make_bot(token: str):
        return Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
except ImportError:
    def make_bot(token: str):
        return Bot(token=token)  # fallback

# config
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL", "https://yourgame.pages.dev")  # URL, –≥–¥–µ –ª–µ–∂–∏—Ç index.html
if not TOKEN:
    print("–£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    exit(1)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

bot = make_bot(TOKEN)
dp = Dispatcher()


@dp.message(Command(commands=["start", "sr_start"]))
async def cmd_start(message: types.Message):
    # —Å—Ç–∞–≤–∏–º WebApp-–∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é —á–∞—Ç–∞
    try:
        await bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=MenuButtonWebApp(text="üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=f"{WEBAPP_URL}/?chat_id={message.chat.id}"))
        )
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebApp –∫–Ω–æ–ø–∫—É: %s", e)

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∞—Ä–µ–Ω–∞", web_app=WebAppInfo(url=f"{WEBAPP_URL}/?chat_id={message.chat.id}"))]
    ])
    await message.reply(
        f"üî• –ó–∞—Ü–µ–Ω–∏ —Å–≤–æ—é –∞—Ä–µ–Ω—ã —Å–æ—Ü-—Ä–µ–π—Ç–∏–Ω–≥–∞, {message.from_user.full_name or message.from_user.username} ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", 
        reply_markup=kb
    )


@dp.message(Command(commands=["help", "sr_help"]))
async def cmd_help(message: types.Message):
    await message.reply(
        "üß† /sr_start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å WebApp (—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ–ª–µ—Å–æ, —Å–ª–æ—Ç, —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∑–≤—ë–∑–¥–æ—á–∫–∏)\n"
        "üíé –í WebApp: /daily, –ø—Ä–µ—Å—Ç–∏–∂, –∫–æ–ª–µ—Å–æ, —Å–ª–æ—Ç, –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å /sr_leaderboard, /sr_gift –∏ —Ç.–ø. —á–µ—Ä–µ–∑ API\n"
        "üõ† –ê–¥–º–∏–Ω–∫–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ (–≤—ã–¥–∞—á–∞ –∑–≤—ë–∑–¥–æ—á–µ–∫, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞)."
    )


@dp.message()
async def fallback(message: types.Message):
    if message.text and message.text.startswith("/"):
        await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–∫–∞—Ç—ã–≤–∞–π /sr_start —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å.")
    else:
        await message.reply("–ñ–º–∏ /sr_start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–æ—Ü-–∞—Ä–µ–Ω—É.")


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
